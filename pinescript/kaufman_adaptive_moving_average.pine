// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© palitoj_endthen

//@version=5
indicator(title = 'Kaufmans Adaptive Moving Average', shorttitle = 'kama', overlay = true)


// input
length = input.int(defval = 10, title = 'Length', group = 'Value', tooltip = 'Determines the length of input')
fast_length = input.int(defval = 2, title = 'Fast Moving Average', group = 'Value', tooltip = 'Determines the length of fast input')
slow_length = input.int(defval = 30, title = 'Slow Moving Average', group = 'Value', tooltip = 'Determines the length of slow input')
src = input.source(defval = ohlc4, title = 'Source', group = 'Source', tooltip = 'Determines the source of input data')
hysteresis = input.bool(defval = false, title = 'Hysteresis', group = 'Options', tooltip = 'Determines whether to display hysteresis band')


// kaufman adaptive moving average
fastest = 2/(fast_length+1)
slowest = 2/(slow_length+1)

// eficiency ratio
nom = src - src[length] 
nom := nom > 0 ? nom : nom*-1
denom = math.sum(math.abs(src-src[1]), length)
er = nom/denom

// smoothing constant
sc = math.pow(er*(fastest-slowest)+slowest, 2)

kama = 0.00
kama := nz(kama[1]) + sc*(src-nz(kama[1]))


// visualize
// color condition
color_con = kama > kama[1] and kama[1] > kama[2] ? color.green : color.red
color_con_ = kama > kama[1] and kama[1] > kama[2]

plot(kama, color = color_con, linewidth = 2)
plot(hysteresis ? kama*(1+(.5/100)) : na, color = color.new(color.yellow, 50), linewidth = 1)
plot(hysteresis ? kama*(1-(.5/100)) : na, color = color.new(color.yellow, 50), linewidth = 1)


// alert condition
alertcondition((not color_con_[1] and color_con_ and barstate.isconfirmed), title = 'Kama Entry', message = 'Buy/Long entry detected')
alertcondition((color_con_[1] and not color_con_ and barstate.isconfirmed), title = 'Kama Close', message = 'Sell/Short entry detected ')


// strategy test
// long_condition = not (color_con_[1] and color_con_)
// if long_condition
//     strategy.entry('long', strategy.long)

// short_condition = color_con_[1] and not color_con_
// if short_condition
//     strategy.exit('exit', 'long', profit = 10, loss = 1)
