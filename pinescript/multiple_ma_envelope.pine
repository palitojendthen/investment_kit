// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© palitoj_endthen

//@version=5
indicator(title = 'multiple_ma_envelope', shorttitle = 'ma_envelope', overlay = true)


// input
src = input.source(defval = ohlc4, title = 'Source', group = 'Source', tooltip = 'Determines input data for moving averages')
ma_type = input.string(defval = 'WMA', title = 'MA Type', group = 'Source', options = ['EMA', 'SMA', 'WMA'], tooltip = 'Determines type of moving average')
length = input.int(defval = 10, title = 'Length', group = 'Value', tooltip = 'Determines length of moving average')
mult = input.float(defval = 0.1, title = 'Band Multiplier', group = 'Value', step = 0.1, tooltip = 'Determines value of multiplier for upper and lower band')
value_at_risk = input.float(defval = 5.0, title = 'Confidence', group = 'Value', tooltip = 'Input confidence level, no need to conver to decimal ')


// multiple band ma envelope
float ma = switch ma_type
    "EMA" => ta.ema(src, length)
    "SMA" => ta.sma(src, length)
    "WMA" => ta.wma(src, length)

ma_env(source_, length_, mult_)=>
    upper_band = ma*(1+mult_)
    lower_band = ma*(1-mult_)
    [upper_band, lower_band]


// visualize
// 10 bar
[u10, l10] = ma_env(src, 10, mult)
fill(plot(u10, color = na), plot(l10, color = na), color.new(#1E90FF, 97))

// 20 bar
[u20, l20] = ma_env(src, 20, mult+.2)
fill(plot(u20, color = na), plot(l20, color = na), color.new(#1E90FF, 97))

// 50 bar
[u50, l50] = ma_env(src, 50, mult+.4)
fill(plot(u50, color = na), plot(l50, color = na), color.new(#1E90FF, 97))

// 100 bar
[u100, l100] = ma_env(src, 100, mult+.6)
fill(plot(u100, color = na), plot(l100, color = na), color.new(#1E90FF, 95))


// information Value
y = input.string('top', 'Position', inline = '8', options = ['top', 'middle', 'bottom'], group = 'Adjustment')
x = input.string('right', '', inline = '8', options = ['left', 'center', 'right'], group = 'Adjustment')
var table information_table = table.new(y + "_" + x, 2, 5)
table.cell(information_table, 0, 1, 'Information' , text_halign = text.align_left, text_size = size.normal, text_color = color.new(#1E90FF, 50))
table.cell(information_table, 1, 1, 'Value' , text_size = size.normal, text_color = color.new(#1E90FF, 50))

// deviation
returns = (close/close[1]) -1
stdev = math.round(ta.stdev(returns, length), 3)
table.cell(information_table, 0, 2, 'Deviation' , text_halign = text.align_left, text_size = size.normal, text_color = color.new(color.white, 50))
table.cell(information_table, 1, 2, str.tostring(stdev) , text_size = size.normal, text_color = color.new(color.white, 50))

// drawdown
h = ta.highest(src, length)
drawdown = math.round(float(((src[0]/h)-1)),3)
table.cell(information_table, 0, 3, 'Drawdown' , text_halign = text.align_left, text_size = size.normal, text_color = color.new(color.white, 50))
table.cell(information_table, 1, 3, str.tostring(drawdown), text_size = size.normal, text_color = color.new(color.white, 50))

// value-at-risk
VaR = math.round(ta.percentile_nearest_rank(returns, length, value_at_risk),3)
table.cell(information_table, 0, 4, 'Value-at-Risk' , text_halign = text.align_left, text_size = size.normal, text_color = color.new(color.white, 50))
table.cell(information_table, 1, 4, str.tostring(VaR) ,text_size = size.normal, text_color = color.new(color.white, 50))
