// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© palitoj_endthen

//@version=5
indicator(title = 'ehlers_predictive_moving_average', shorttitle = 'predictive_moving_average', overlay = true, timeframe = '', timeframe_gaps = true)


// input
src = input.source(ohlc4, title = 'Source', group = 'Value', tooltip = 'Determines the input data source, default to OHLC4')
length = input.int(defval = 10, title = 'Length', group = 'Value', tooltip = 'Determines the length of input for deviation')
bar_color = input.bool(defval= false, title = 'Bar Color', group = 'Options', tooltip = 'Determines whether to change the bar color base on crossover or crossunder of predict to trigger')


// predictive moving average
wma1 = 0.0
wma2 = 0.0
predict = 0.0
trigger = 0.0

wma1 := (7*src + 6*src[1] + 5*src[2] + 4*src[3] + 3*src[4] + 2*src[5] + src[6])/28
wma2 := (7*wma1 + 6*wma1[1] + 5*wma1[2] + 4*wma1[3] + 3*wma1[4] + 2*wma1[5] + wma1[6])/28

predict := (2*wma1)-wma2
trigger := (4*predict + 3*predict[1] + 2*predict[2] + predict)/10


// deviation
returns = (close/close[1])-1
stdev = ta.stdev(returns, length)


// visualize
series_ = predict > trigger ? predict : trigger
upper = series_*(1+math.abs(stdev))
lower = series_*(1-math.abs(stdev))

// color condition
color_con = predict > trigger and predict > predict[1] ? color.green : color.red 
color_con_ = predict > trigger and predict > predict[1]

// bar color
barcolor(bar_color ? color_con : na)

// line type
plot(series_, color = color_con, style = plot.style_line, linewidth = 2)
p_up = plot(upper, color = color.new(color.white, 80))
p_low = plot(lower, color = color.new(color.white, 80))
fill(p_up, p_low, color = color.new(color.gray, 90))

// create alert
alertcondition((not color_con_[1] and color_con_), title = 'Entry', message = 'Buy/Long entry point detected')
alertcondition((color_con_ and not color_con_), title = 'Close', message = 'Sell/Short entry point detected')
